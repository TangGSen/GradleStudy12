apply plugin: 'com.android.application'
def javaVersion = JavaVersion.VERSION_1_7
def bakPath = file("${buildDir}/bakApk/") //指定基准文件存放位置
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "sen.com.classloadv1"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs{
        debug{

        }
        release{
            storeFile file("test.jks")
            storePassword "testtest"
            keyAlias "testtest"
            keyPassword "testtest"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:support-vector-drawable:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile 'com.alipay.euler:andfix:0.5.0@aar'

    //optional, help to generate the final application
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"){ changing = true }
    //tinker's main Android lib
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"){ changing = true }
    compile 'com.android.support:multidex:1.0.1'

}


//用来控制是否使用tinker

ext {
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/andfixtinker-release-0912-18-27-37.apk"
    tinkerID = "1.0"
    tinkerApplyMappingPath = "${bakPath}/andfixtinker-release-0912-18-27-37-mapping.txt"
    tinkerApplyResourcePath = "${bakPath}/andfixtinker-release-0912-18-27-37-R.txt"

//    tinkerEnable = true
//    tinkerOldApkPath = "${bakPath}/"
//    tinkerID = "1.0"
//    tinkerApplyMappingPath = "${bakPath}/"
//    tinkerApplyResourcePath = "${bakPath}/"
}

def buildWithTinker() {

    return ext.tinkerEnable
}

def getOldApkPath() {

    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {

    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {

    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {

    return ext.tinkerID
}


if (buildWithTinker()) {
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'

    //所有tinker相关的参数配置
    tinkerPatch {

        oldApk = getOldApkPath() //指定old apk文件径

        ignoreWarning = false   //不忽略tinker的警告，有则中止patch文件的生成

        useSign = true  //强制patch文件也使用签名

        tinkerEnable = buildWithTinker(); //指定是否启用tinker

        buildConfig {

            applyMapping = getApplyMappingPath()  //指定old apk打包时所使用的混淆文件

            applyResourceMapping = getApplyResourceMappingPath()  //指定old apk的资源文件

            tinkerId = getTinkerIdValue() //指定TinkerID

            keepDexApply = false
        }

        dex {

            dexMode = "jar" //jar、raw
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"] //指定dex文件目录
            loader = ["sen.com.classloadv1.tinker.SampleApplication"] //指定加载patch文件时用到的类
        }

        lib {

            pattern = ["libs/*/*.so"]
        }

        res {

            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            //指定tinker可以修改的资源路径

          //  ignoreChange = ["assets/sample_meta.txt"] //指定不受影响的资源路径

            largeModSize = 100 //资源修改大小默认值
        }

        packageConfig {

            configField("patchMessage","fix the 1.0 version's bugs")

            configField("patchVersion", "1.0")
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}
